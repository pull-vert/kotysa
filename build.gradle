import org.jetbrains.kotlin.config.KotlinCompilerVersion

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.31'
    id 'org.jetbrains.dokka' version '0.9.18'
}

println("Using Gradle version: $gradle.gradleVersion")
println("Using Kotlin compiler version: $KotlinCompilerVersion.VERSION")

repositories {
    jcenter()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation "io.github.microutils:kotlin-logging:$kotlin_logging_version"
    
    compileOnly "io.projectreactor.kotlin:reactor-kotlin-extensions:$reactor_kotlin_extension_version"
    compileOnly "org.springframework.data:spring-data-r2dbc:$spring_data_r2dbc_version"
    compileOnly "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinx_coroutines_version"
    compileOnly "org.jetbrains.kotlinx:kotlinx-coroutines-reactor:$kotlinx_coroutines_version"

    testImplementation "org.springframework.fu:spring-fu-kofu:$spring_fu_version"
    testImplementation "io.projectreactor.kotlin:reactor-kotlin-extensions:$reactor_kotlin_extension_version"
    testImplementation "org.springframework.data:spring-data-r2dbc:$spring_data_r2dbc_version"
    testImplementation "io.r2dbc:r2dbc-h2:$r2dbc_version"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_version"
    testImplementation "io.strikt:strikt-core:$strikt_version"
    testImplementation "io.mockk:mockk:$mokk_version"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$kotlinx_coroutines_version"
    testImplementation "org.assertj:assertj-core:$assertj_version"
    testImplementation "ch.qos.logback:logback-classic:$logback_version"
    
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_version"
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict', '-Xjvm-default=enable']
        jvmTarget = '1.8'
    }
}

compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict', '-Xjvm-default=enable']
        jvmTarget = '1.8'
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events 'passed', 'failed', 'skipped'
        showStandardStreams = true
    }
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"

    jdkVersion = 8
    includes = ['README.md']

    externalDocumentationLink {
        url = new URL("https://docs.spring.io/spring-data/r2dbc/docs/1.0.x/api/")
    }
}

// xxx-javadoc.jar
task javadocJar(type: Jar, dependsOn: dokka) {
    classifier = 'javadoc'
    from "$buildDir/javadoc"
}

// xxx-sources.jar
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

// execute ./gradlew wrapper then remove .gradle directory when version change
wrapper {
    gradleVersion = '5.4.1'
    distributionType = Wrapper.DistributionType.ALL
}
